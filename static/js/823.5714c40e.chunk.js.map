{"version":3,"file":"static/js/823.5714c40e.chunk.js","mappings":"2RACA,EAAuB,6BAAvB,EAA2D,6BAA3D,EAA+F,6BAA/F,EAAqI,+B,UC+BrI,EA1B2B,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACtBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAWH,EAAOI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OAC1B,SAAC,KAAD,CAEEC,UAAWC,EACXC,GAAE,yBAAoBL,GACtBM,MAAO,CAAEC,KAAMX,GAJjB,UAME,eAAIO,UAAWC,EAAf,SAA0BH,GAAgBC,KALrCF,EAFmB,IAW5B,OAAO,eAAIG,UAAWC,EAAf,SAA0BN,GAClC,E,mBCyBD,EAnCuB,WACrB,OAA4BU,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAec,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,sGAKhBJ,GAAW,GALK,UAMMK,EAAAA,EAAAA,MANN,OAMVC,EANU,OAOhBR,EAAUQ,GAPM,gDAQPC,EARO,KAQPA,SACTL,EAASK,EAASC,KAAKC,SACvBC,EAAAA,EAAAA,IAAM,GAAD,OAAIH,EAASC,KAAKC,SAVP,yBAYhBT,GAAW,GAZK,4EAAH,qDAejBI,GACD,GAAE,CAACN,KAGF,4BACE,eAAIN,UAAWC,EAAf,4BACCQ,IAAS,cAAGT,UAAU,GAAb,SAAiBS,IAC1BF,IAAW,SAACY,EAAA,EAAD,IACX3B,IAAU,SAAC,EAAD,CAAoBA,OAAQA,IACtCiB,IAAS,SAAC,KAAD,MAGf,EChCD,EAR2B,WACzB,OACE,SAACW,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,SAAC,EAAD,KAGL,C,wLCRKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAY,mCAAG,WAAMC,GAAN,yFACHN,EAASO,IAAI,iBAAkB,CACpDJ,OAAQ,CACNG,MAAAA,KAHsB,uBAClBZ,EADkB,EAClBA,KADkB,kBAOnBA,EAAKF,SAPc,2CAAH,sDAUZD,EAAY,mCAAG,2GAAOiB,EAAP,+BAAc,EAAd,SACHR,EAASO,IAAI,qBAAsB,CACxDJ,OAAQ,CACNK,KAAAA,KAHsB,uBAClBd,EADkB,EAClBA,KADkB,kBAMnBA,EAAKF,SANc,2CAAH,qDASZiB,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAASO,IAAT,iBAAuBG,EAAvB,MADG,uBAClBhB,EADkB,EAClBA,KADkB,kBAGnBA,GAHmB,2CAAH,sDAMZiB,EAAQ,mCAAG,WAAMD,GAAN,yFACCV,EAASO,IAAT,iBAAuBG,EAAvB,cADD,uBACdhB,EADc,EACdA,KADc,kBAEfA,EAAKkB,MAFU,2CAAH,sDAKRC,EAAU,mCAAG,WAAMH,GAAN,yFACDV,EAASO,IAAT,iBAAuBG,EAAvB,eADC,uBAChBhB,EADgB,EAChBA,KADgB,kBAEjBA,EAAKF,SAFY,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/Movies/TrendingMovies/TrendingMovies.module.css?ae48","components/Movies/TrendingMovies/TrendingMoviesList/TrendingMoviesList.jsx","components/Movies/TrendingMovies/TrendingMovies.jsx","pages/TrandingMoviesPage/TrendingMoviesPage.jsx","shared/services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"TrendingMovies_list__iGmuk\",\"item\":\"TrendingMovies_item__Q9Ke7\",\"link\":\"TrendingMovies_link__0o6RR\",\"header\":\"TrendingMovies_header__5gaG9\"};","import PropTypes from 'prop-types';\n\nimport { Link, useLocation } from 'react-router-dom';\n\nimport css from '../TrendingMovies.module.css';\n\nconst TrendingMoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  const elements = movies.map(({ id, title, name }) => (\n    <Link\n      key={id}\n      className={css.link}\n      to={`/movies-finder/${id}`}\n      state={{ from: location }}\n    >\n      <li className={css.item}>{title ? title : name}</li>\n    </Link>\n  ));\n\n  return <ul className={css.list}>{elements}</ul>;\n};\n\nTrendingMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string,\n    })\n  ),\n};\n\nexport default TrendingMoviesList;\n","import { useState, useEffect } from 'react';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport TrendingMoviesList from './TrendingMoviesList/TrendingMoviesList';\nimport { getAllMovies } from 'shared/services/movies-api';\nimport Loader from 'shared/components/Loader/Loader';\n\nimport css from '../TrendingMovies/TrendingMovies.module.css';\n\nconst TrendingMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      // if (movies.length !== 0) {\n      //   return;\n      // }\n      try {\n        setLoading(true);\n        const results = await getAllMovies();\n        setMovies(results);\n      } catch ({ response }) {\n        setError(response.data.mesage);\n        toast(`${response.data.mesage}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [setMovies]);\n\n  return (\n    <div>\n      <h1 className={css.header}>Trending today</h1>\n      {error && <p className=\"\">{error}</p>}\n      {loading && <Loader />}\n      {movies && <TrendingMoviesList movies={movies} />}\n      {error && <ToastContainer />}\n    </div>\n  );\n};\n\nexport default TrendingMovies;\n","import { Container } from '@mui/material';\n\nimport TrendingMovies from 'components/Movies/TrendingMovies/TrendingMovies';\n\nconst TrendingMoviesPage = () => {\n  return (\n    <Container maxWidth=\"xl\">\n      <TrendingMovies />\n    </Container>\n  );\n};\n\nexport default TrendingMoviesPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '5bbf892bcd99762773ec3ce2eced7cd4',\n  },\n});\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get('/search/movie?', {\n    params: {\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getAllMovies = async (page = 1) => {\n  const { data } = await instance.get('/trending/all/day?', {\n    params: {\n      page,\n    },\n  });\n  return data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}?`);\n\n  return data;\n};\n\nexport const getCasts = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits?`);\n  return data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}//reviews?`);\n  return data.results;\n};\n\n// api key: 5bbf892bcd99762773ec3ce2eced7cd4\n\n//https://api.themoviedb.org/3/movie/550?api_key=5bbf892bcd99762773ec3ce2eced7cd4\n"],"names":["movies","location","useLocation","elements","map","id","title","name","className","css","to","state","from","useState","setMovies","loading","setLoading","error","setError","useEffect","fetchMovies","getAllMovies","results","response","data","mesage","toast","Loader","Container","maxWidth","instance","axios","baseURL","params","api_key","searchMovies","query","get","page","getMovieById","movieId","getCasts","cast","getReviews"],"sourceRoot":""}